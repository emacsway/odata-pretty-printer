//
// https://docs.microsoft.com/en-us/azure/search/search-query-odata-syntax-reference
//

start: filter_expression

// Top-level rules

filter_expression: boolean_expression

order_by_expression: order_by_clause("," order_by_clause)*

select_expression: "*" | field_path("," field_path)*

field_path: IDENTIFIER ("/" IDENTIFIER)*


// Shared base rules

IDENTIFIER: /[a-zA-Z_][a-zA-Z_0-9]*/


// Rules for $orderby

order_by_clause: (field_path | sortable_function) ("asc" | "desc")?

sortable_function: geo_distance_call | "search.score()"


// Rules for $filter

boolean_expression: collection_filter_expression
    | logical_expression
    | comparison_expression
    | BOOLEAN_LITERAL
    | boolean_function_call
    | "(" boolean_expression ")" -> parentheses_expression
    | variable

// This can be a range variable in the case of a lambda, or a field path.

variable: IDENTIFIER | field_path

collection_filter_expression: field_path ANY_OR_ALL lambda_expression? ")"

lambda_expression: IDENTIFIER ":" boolean_expression

logical_expression: boolean_expression AND_OR boolean_expression
    | NOT boolean_expression

comparison_expression: variable_or_function COMPARISON_OPERATOR constant
    | constant COMPARISON_OPERATOR variable_or_function

variable_or_function: variable | function_call

ANY_OR_ALL : /\/(all|any)\(/

COMPARISON_OPERATOR: /gt|lt|ge|le|eq|ne/

AND_OR : /and|or/

NOT : /not/

//===================================================
// Rules for constants and literals
//===================================================

constant: STRING_LITERAL
    | DATE_TIME_OFFSET_LITERAL
    | INTEGER_LITERAL
    | FLOAT_LITERAL
    | BOOLEAN_LITERAL
    | NULL

STRING_LITERAL: "'" (/[^']/ | "''")* "'"

NULL : "null"

DATE_TIME_OFFSET_LITERAL: DATE_PART "T" TIME_PART TIME_ZONE

DATE_PART: YEAR "-" MONTH "-" DAY

TIME_PART: HOUR ":" MINUTE( ":" SECOND("." FRACTIONAL_SECONDS)?)?

ZERO_TO_FIFTY_NINE: /[0-5]/ DIGIT

DIGIT: /[0-9]/

YEAR: DIGIT DIGIT DIGIT DIGIT

MONTH: "0" /[1-9]/ | "1" /[0-2]/

DAY: "0" /[1-9]/ | /[1-2]/ DIGIT | "3" /[0-1]/

HOUR: /[0-1]/ DIGIT | "2" /[0-3]/

MINUTE: ZERO_TO_FIFTY_NINE

SECOND: ZERO_TO_FIFTY_NINE

FRACTIONAL_SECONDS: INTEGER_LITERAL

TIME_ZONE: "Z" | SIGN HOUR ":" MINUTE

SIGN: "+" | "-"

// In practice integer literals are limited in length to the precision of
// the corresponding EDM data type.

INTEGER_LITERAL: DIGIT+

FLOAT_LITERAL: SIGN? WHOLE_PART FRACTIONAL_PART? EXPONENT?
    | "NaN"
    | "-INF"
    | "INF"

WHOLE_PART: INTEGER_LITERAL

FRACTIONAL_PART: "." INTEGER_LITERAL

EXPONENT: "e" SIGN? INTEGER_LITERAL

BOOLEAN_LITERAL: "true" | "false"

// Rules for functions

function_call: geo_distance_call | boolean_function_call

geo_distance_call:  "geo.distance(" variable "," geo_point ")"
    | "geo.distance(" geo_point "," variable ")"

geo_point: "geography'POINT(" LON_LAT ")'"

LON_LAT: FLOAT_LITERAL " " FLOAT_LITERAL

boolean_function_call: geo_intersects_call | search_in_call | search_is_match_call

geo_intersects_call: "geo.intersects(" variable "," geo_polygon ")"

// You need at least four points to form a polygon, where the first and
// last points are the same.

geo_polygon: "geography'POLYGON((" LON_LAT "," LON_LAT "," LON_LAT "," lon_lat_list "))'"

lon_lat_list: LON_LAT("," LON_LAT)*

search_in_call: "search.in(" variable "," STRING_LITERAL("," STRING_LITERAL)? ")"

// Note that it is illegal to call search.ismatch or search.ismatchscoring
// from inside a lambda expression.

search_is_match_call:  "search.ismatch" ( "scoring" )? "(" search_is_match_parameters ")"

search_is_match_parameters: STRING_LITERAL("," STRING_LITERAL("," QUERY_TYPE "," SEARCH_MODE)?)?

QUERY_TYPE: "'full'" | "'simple'"

SEARCH_MODE: "'any'" | "'all'"

// Lark 

%ignore /[\t \f\n]+/  // WS